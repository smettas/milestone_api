{"uid":"5f640c15b07849f1","name":"test_update_post_with_invalid_id","fullName":"tests.test_posts#test_update_post_with_invalid_id","historyId":"1c5e41e8af2790ca3aaa52307104bd68","time":{"start":1751386391867,"stop":1751386392524,"duration":657},"status":"skipped","statusMessage":"XFAIL Fake API accepts string ID\n\nAssertionError: Expected 400 or 404 for invalid ID\nassert 500 in [400, 404]\n +  where 500 = <Response [500]>.status_code","statusTrace":"api = <api.posts_api.PostsAPI object at 0x000002799E0967A0>\n\n    @pytest.mark.negative_test\n    @pytest.mark.xfail(reason=\"Fake API accepts string ID\")\n    def test_update_post_with_invalid_id(api):\n        payload = negative_data[\"invalid_id_post\"]\n        res = api.update_post(\"abc\", payload)\n>       assert res.status_code in [400, 404], \"Expected 400 or 404 for invalid ID\"\nE       AssertionError: Expected 400 or 404 for invalid ID\nE       assert 500 in [400, 404]\nE        +  where 500 = <Response [500]>.status_code\n\ntests\\test_posts.py:83: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":4,"retriesStatusChange":true,"beforeStages":[{"name":"api","time":{"start":1751386388431,"stop":1751386388434,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL Fake API accepts string ID\n\nAssertionError: Expected 400 or 404 for invalid ID\nassert 500 in [400, 404]\n +  where 500 = <Response [500]>.status_code","statusTrace":"api = <api.posts_api.PostsAPI object at 0x000002799E0967A0>\n\n    @pytest.mark.negative_test\n    @pytest.mark.xfail(reason=\"Fake API accepts string ID\")\n    def test_update_post_with_invalid_id(api):\n        payload = negative_data[\"invalid_id_post\"]\n        res = api.update_post(\"abc\", payload)\n>       assert res.status_code in [400, 404], \"Expected 400 or 404 for invalid ID\"\nE       AssertionError: Expected 400 or 404 for invalid ID\nE       assert 500 in [400, 404]\nE        +  where 500 = <Response [500]>.status_code\n\ntests\\test_posts.py:83: AssertionError","steps":[],"attachments":[{"uid":"707438efa82dc394","name":"log","source":"707438efa82dc394.txt","type":"text/plain","size":1101},{"uid":"e828acefad0b8744","name":"stderr","source":"e828acefad0b8744.txt","type":"text/plain","size":244}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"tag","value":"@pytest.mark.xfail(reason='Fake API accepts string ID')"},{"name":"tag","value":"negative_test"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_posts"},{"name":"host","value":"DESKTOP-J0TB641"},{"name":"thread","value":"3588-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_posts"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[{"uid":"72176bba99750039","status":"skipped","statusDetails":"XFAIL Fake API accepts string ID\n\nAssertionError: Expected 400 or 404 for invalid ID\nassert 500 in [400, 404]\n +  where 500 = <Response [500]>.status_code","time":{"start":1751386233167,"stop":1751386233825,"duration":658}},{"uid":"13f2a742d92354ed","status":"skipped","statusDetails":"XFAIL Fake API accepts string ID\n\nAssertionError: Expected 400 or 404 for invalid ID\nassert 500 in [400, 404]\n +  where 500 = <Response [500]>.status_code","time":{"start":1751377539401,"stop":1751377540050,"duration":649}},{"uid":"6644767867630d51","status":"failed","statusDetails":"AssertionError: Expected 400 or 404 for invalid ID\nassert 500 in [400, 404]\n +  where 500 = <Response [500]>.status_code","time":{"start":1751376588689,"stop":1751376589342,"duration":653}},{"uid":"b22dd52b59ef9efd","status":"skipped","statusDetails":"XFAIL Fake API accepts string ID\n\nAssertionError: Expected 400 or 404 for invalid ID\nassert 500 in [400, 404]\n +  where 500 = <Response [500]>.status_code","time":{"start":1751300557252,"stop":1751300558078,"duration":826}}],"categories":[],"tags":["@pytest.mark.xfail(reason='Fake API accepts string ID')","negative_test"]},"source":"5f640c15b07849f1.json","parameterValues":[]}