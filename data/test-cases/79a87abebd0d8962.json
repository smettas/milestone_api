{"uid":"79a87abebd0d8962","name":"test_update_post_with_invalid_id","fullName":"tests.test_posts#test_update_post_with_invalid_id","historyId":"1c5e41e8af2790ca3aaa52307104bd68","time":{"start":1751377539401,"stop":1751377540050,"duration":649},"status":"skipped","statusMessage":"XFAIL Fake API accepts string ID\n\nAssertionError: Expected 400 or 404 for invalid ID\nassert 500 in [400, 404]\n +  where 500 = <Response [500]>.status_code","statusTrace":"api = <api.posts_api.PostsAPI object at 0x0000024FA47DEB90>\n\n    @pytest.mark.negative_test\n    @pytest.mark.xfail(reason=\"Fake API accepts string ID\")\n    def test_update_post_with_invalid_id(api):\n        payload = negative_data[\"invalid_id_post\"]\n        res = api.update_post(\"abc\", payload)\n>       assert res.status_code in [400, 404], \"Expected 400 or 404 for invalid ID\"\nE       AssertionError: Expected 400 or 404 for invalid ID\nE       assert 500 in [400, 404]\nE        +  where 500 = <Response [500]>.status_code\n\ntests\\test_posts.py:82: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"api","time":{"start":1751377537112,"stop":1751377537115,"duration":3},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"skipped","statusMessage":"XFAIL Fake API accepts string ID\n\nAssertionError: Expected 400 or 404 for invalid ID\nassert 500 in [400, 404]\n +  where 500 = <Response [500]>.status_code","statusTrace":"api = <api.posts_api.PostsAPI object at 0x0000024FA47DEB90>\n\n    @pytest.mark.negative_test\n    @pytest.mark.xfail(reason=\"Fake API accepts string ID\")\n    def test_update_post_with_invalid_id(api):\n        payload = negative_data[\"invalid_id_post\"]\n        res = api.update_post(\"abc\", payload)\n>       assert res.status_code in [400, 404], \"Expected 400 or 404 for invalid ID\"\nE       AssertionError: Expected 400 or 404 for invalid ID\nE       assert 500 in [400, 404]\nE        +  where 500 = <Response [500]>.status_code\n\ntests\\test_posts.py:82: AssertionError","steps":[],"attachments":[{"uid":"42b7f7a0ee1a58ce","name":"log","source":"42b7f7a0ee1a58ce.txt","type":"text/plain","size":1101},{"uid":"d1f0c53082a51a52","name":"stderr","source":"d1f0c53082a51a52.txt","type":"text/plain","size":244}],"parameters":[],"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":2,"hasContent":true,"attachmentStep":false},"afterStages":[],"labels":[{"name":"tag","value":"@pytest.mark.xfail(reason='Fake API accepts string ID')"},{"name":"tag","value":"negative_test"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_posts"},{"name":"host","value":"DESKTOP-J0TB641"},{"name":"thread","value":"6440-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_posts"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["@pytest.mark.xfail(reason='Fake API accepts string ID')","negative_test"]},"source":"79a87abebd0d8962.json","parameterValues":[]}